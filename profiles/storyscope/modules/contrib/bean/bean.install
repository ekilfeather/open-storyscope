<?php

/**
 * @file
 * Bean installation routines
 */

/**
 * Implements hook_schema().
 */
function bean_schema() {
  $schema['bean'] = array(
    'description' => 'Stores bean items.',
    'fields' => array(
      'bid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique bean item ID.',
      ),
      'delta' => array(
        'description' => "The bean's {block}.delta.",
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The Displays in the Admin page.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The human-readable name of this bean.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The {bean_type}.type of this bean.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'view_mode' => array(
        'description' => 'The View mode to use as the bean.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'default',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this bean.',
      ),
    ),
    'foreign keys' => array(
      'type' => array(
        'table' => 'bean_type',
        'columns' => array('type' => 'type'),
      ),
    ),
    'primary key' => array('bid'),
    'unique keys' => array(
      'delta' => array('delta'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function bean_uninstall() {
  // Make sure bean.module is include.
  require dirname(__FILE__) . DIRECTORY_SEPARATOR . 'bean.module';
  // Bypass entity_load() as we cannot use it here.
  foreach (bean_get_types() as $bean_type) {
    field_attach_delete_bundle('bean', $bean_type->type);
  }
}

/**
 * Implements hook_disable().
 */
function bean_disable() {
  // Remove all of the currently placed blocks

  // Delete any blocks
  // @see block_custom_block_delete_submit()
  db_delete('block')
    ->condition('module', 'bean')
    ->execute();
  db_delete('block_role')
    ->condition('module', 'bean')
    ->execute();

  // @see node_form_block_custom_block_delete_submit()
  db_delete('block_node_type')
    ->condition('module', 'bean')
    ->execute();
}


/**
 * Update Registry to implement new Code Interface
 */
function bean_update_7001() {
  registry_rebuild();
  return t('Registry has been rebuilt');
}

/**
 * Add delta field.
 */
function bean_update_7002() {
  $spec = array(
    'description' => "The bean's {block}.delta.",
    'type' => 'varchar',
    'initial' => '',
    'length' => 32,
    'not null' => TRUE,
  );
  db_add_field('bean', 'delta', $spec);
  db_update('bean')
    ->expression('delta', 'bid')
    ->execute();
  return t('Bean delta field added.');
}

/**
 * Add view_mode field.
 */
function bean_update_7003() {
  $spec = array(
    'description' => "The view mode of the bean.",
    'type' => 'varchar',
    'initial' => 'default',
    'length' => 32,
    'not null' => TRUE,
  );
  db_add_field('bean', 'view_mode', $spec);
  db_update('bean')
    ->fields(array('view_mode' => 'default'))
    ->execute();
  return t('Bean view mode field added.');
}

/**
 * Update Registry to implement new Code Interface
 */
function bean_update_7004() {
  registry_rebuild();
  return t('Registry has been rebuilt');
}

/**
 * Rebuild the menus
 */
function bean_update_7005() {
  registry_rebuild();
  menu_rebuild();
  return t('Registry and Menu have been rebuilt');
}

/**
 * Rebuild the registry to include new translation class
 */
function bean_update_7006() {
  registry_rebuild();
  return t('Registry and Menu have been rebuilt');
}

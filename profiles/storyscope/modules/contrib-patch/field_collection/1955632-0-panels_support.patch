diff --git field_collection/field_collection.module field_collection/field_collection.module
index bf6a005..fe9684f 100644
--- field_collection/field_collection.module
+++ field_collection/field_collection.module
@@ -1862,3 +1862,16 @@ function field_collection_devel_generate($object, $field, $instance, $bundle) {
 
   return array('value' => $field_collection->item_id);
 }
+
+/**
+ * Implements hook_ctools_plugin_directory().
+ */
+function field_collection_ctools_plugin_directory($owner, $plugin_type) {
+  if ($owner == 'page_manager' && $plugin_type == 'tasks') {
+    return 'plugins/tasks';
+  }
+  elseif ($owner == 'ctools' && !empty($plugin_type)) {
+    return 'plugins/' . $plugin_type;
+  }
+}
+
diff --git field_collection/plugins/arguments/field_collection_item_edit.inc field_collection/plugins/arguments/field_collection_item_edit.inc
new file mode 100644
index 0000000..d952b86
--- /dev/null
+++ field_collection/plugins/arguments/field_collection_item_edit.inc
@@ -0,0 +1,51 @@
+<?php
+
+/**
+ * @file
+ *
+ * Plugin to provide an argument handler for a field collection item edit form
+ */
+
+/**
+ * Plugins are described by creating a $plugin array which will be used
+ * by the system that includes this file.
+ */
+$plugin = array(
+  'title' => t("Field collection item edit form: field collection item ID"),
+  // keyword to use for %substitution
+  'keyword' => 'field_collection_item',
+  'description' => t('Creates a field collection item edit form context from a field collection item ID argument.'),
+  'context' => 'field_collection_field_collection_item_edit_context',
+  'placeholder form' => array(
+    '#type' => 'textfield',
+    '#description' => t('Enter the field collection item ID of a field collection item for this argument'),
+  ),
+);
+
+/**
+ * Discover if this argument gives us the field collection item we crave.
+ */
+function field_collection_field_collection_item_edit_context($arg = NULL, $conf = NULL, $empty = FALSE) {
+  // If unset it wants a generic, unfilled context.
+  if ($empty) {
+    return ctools_context_create_empty('field_collection_item_edit_form');
+  }
+
+  // We can accept either a field collection item object or a pure item_id.
+  if (is_object($arg)) {
+    return ctools_context_create('field_collection_item_edit_form', $arg);
+  }
+
+  if (!is_numeric($arg)) {
+    return FALSE;
+  }
+
+  $field_collection_item = field_collection_item_load($arg);
+  if (!$field_collection_item) {
+    return NULL;
+  }
+
+  // This will perform an access check, so we don't have to.
+  return ctools_context_create('field_collection_item_edit_form', $field_collection_item);
+}
+
diff --git field_collection/plugins/content_types/field_collection_form_buttons.inc field_collection/plugins/content_types/field_collection_form_buttons.inc
new file mode 100644
index 0000000..6a828e6
--- /dev/null
+++ field_collection/plugins/content_types/field_collection_form_buttons.inc
@@ -0,0 +1,43 @@
+<?php
+
+/**
+ * Plugins are described by creating a $plugin array which will be used
+ * by the system that includes this file.
+ */
+$plugin = array(
+  'single' => TRUE,
+  'icon' => 'icon_field_collection_form.png',
+  'title' => t('Field collection form submit buttons'),
+  'description' => t('Submit buttons for the field collection form.'),
+  'required context' => new ctools_context_required(t('Form'), 'field_collection_item_form'),
+  'category' => t('Form'),
+);
+
+function field_collection_field_collection_form_buttons_content_type_render($subtype, $conf, $panel_args, &$context) {
+  $block = new stdClass();
+  $block->module = t('field_collection_item_form');
+
+  $block->title = '';
+  $block->delta = 'buttons';
+
+  if (isset($context->form)) {
+    $block->content = array();
+    foreach (array('actions', 'form_token', 'form_build_id', 'form_id') as $element) {
+      $block->content[$element] = isset($context->form[$element]) ? $context->form[$element] : NULL;
+      unset($context->form[$element]);
+    }
+  }
+  else {
+    $block->content = t('Field collection form buttons.');
+  }
+  return $block;
+}
+
+function field_collection_field_collection_item_form_buttons_content_type_admin_title($subtype, $conf, $context) {
+  return t('"@s" field collection form submit buttons', array('@s' => $context->identifier));
+}
+
+function field_collection_field_collection_item_form_buttons_content_type_edit_form($form, &$form_state) {
+  // provide a blank form so we have a place to have context setting.
+  return $form;
+}
diff --git field_collection/plugins/content_types/icon_field_collection_form.png field_collection/plugins/content_types/icon_field_collection_form.png
new file mode 100644
index 0000000..f0417cb
Binary files /dev/null and field_collection/plugins/content_types/icon_field_collection_form.png differ
diff --git field_collection/plugins/contexts/.field_collection_item_add_form.inc.swp field_collection/plugins/contexts/.field_collection_item_add_form.inc.swp
new file mode 100644
index 0000000..20be233
Binary files /dev/null and field_collection/plugins/contexts/.field_collection_item_add_form.inc.swp differ
diff --git field_collection/plugins/contexts/field_collection_item.inc field_collection/plugins/contexts/field_collection_item.inc
new file mode 100644
index 0000000..be7fbd6
--- /dev/null
+++ field_collection/plugins/contexts/field_collection_item.inc
@@ -0,0 +1,163 @@
+<?php
+
+/**
+ * @file
+ *
+ * Plugin to provide a field collection item context. A field collection item
+ * context is a field collection item wrapped in a
+ * context object that can be utilized by anything that accepts contexts.
+ */
+
+/**
+ * Plugins are described by creating a $plugin array which will be used
+ * by the system that includes this file.
+ */
+$plugin = array(
+  'title' => t('Field collection item'),
+  'description' => t('A field collection item object.'),
+  'context' => 'field_collection_context_create_field_collection_item',
+  'edit form' => 'field_collection_context_field_collection_item_settings_form',
+  'defaults' => array('item_id' => ''),
+  'keyword' => 'field_collection_item',
+  'context name' => 'field_collection_item',
+  'convert list' => 'field_collection_context_field_collection_item_convert_list',
+  'convert' => 'field_collection_context_field_collection_item_convert',
+  'placeholder form' => array(
+    '#type' => 'textfield',
+    '#description' => t('Enter the field collection item ID of a field collection item for this context.'),
+  ),
+  // This context is deprecated and should not be usable in the UI.
+  'no ui' => TRUE,
+  'no required context ui' => TRUE,
+  'superceded by' => 'entity:field_collection_item',
+);
+
+/**
+ * It's important to remember that $conf is optional here, because contexts
+ * are not always created from the UI.
+ */
+function field_collection_context_create_field_collection_item($empty, $data = NULL, $conf = FALSE) {
+  $context = new ctools_context('field_collection_item');
+  $context->plugin = 'field_collection_item';
+
+  if ($empty) {
+    return $context;
+  }
+
+  if ($conf) {
+    $item_id = is_array($data) && isset($data['item_id']) ? $data['item_id'] : (is_object($data) ? $data->item_id : 0);
+
+    if (module_exists('translation')) {
+      if ($translation = module_invoke('translation', 'field_collection_item_item_id', $item_id, $GLOBALS['language']->language)) {
+        $item_id = $translation;
+        $reload = TRUE;
+      }
+    }
+
+    if (is_array($data) || !empty($reload)) {
+      $data = field_collection_item_load($item_id);
+    }
+  }
+
+  if (!empty($data)) {
+    $context->data     = $data;
+    $context->title    = $data->label();
+    $context->argument = $data->item_id;
+
+    $context->restrictions['type'] = array($data->type);
+    return $context;
+  }
+}
+
+function field_collection_context_field_collection_item_settings_form($form, &$form_state) {
+  $conf = &$form_state['conf'];
+
+  $form['field_collection_item'] = array(
+    '#title' => t('Enter the item id of a field collection item'),
+    '#type' => 'textfield',
+    '#maxlength' => 512,
+    '#autocomplete_path' => 'ctools/autocomplete/field_collection_item',
+    '#weight' => -10,
+  );
+
+  if (!empty($conf['item_id'])) {
+    $info = db_query('SELECT * FROM {field_collection_item} WHERE item_id = :item_id', array(':item_id' => $conf['item_id']))->fetchObject();
+    if ($info) {
+      $link = l(t('%field_name [item id %item_id]', array('%field_name' => $info->field_name, '%item_id' => $info->item_id)), 'field-collection/'. strtr($info->field_name, array('_' => '-')) . '/' . $info->item_id, array('attributes' => array('target' => '_blank', 'title' => t('Open in new window')), 'html' => TRUE));
+      $form['field_collection_item']['#description'] = t('Currently set to !link', array('!link' => $link));
+    }
+  }
+
+  $form['item_id'] = array(
+    '#type' => 'value',
+    '#value' => $conf['item_id'],
+  );
+
+  return $form;
+}
+
+/**
+ * Validate a field collection item.
+ */
+function field_collection_context_field_collection_item_settings_form_validate($form, &$form_state) {
+  // Validate the autocomplete
+  if (empty($form_state['values']['item_id']) && empty($form_state['values']['field_collection_item'])) {
+    form_error($form['field_collection_item'], t('You must select a field collection item.'));
+    return;
+  }
+
+  if (empty($form_state['values']['field_collection_item'])) {
+    return;
+  }
+
+  $item_id          = $form_state['values']['field_collection_item'];
+  $preg_matches = array();
+  $match        = preg_match('/\[id: (\d+)\]/', $item_id, $preg_matches);
+  if (!$match) {
+    $match = preg_match('/^id: (\d+)/', $item_id, $preg_matches);
+  }
+
+  if ($match) {
+    $item_id = $preg_matches[1];
+  }
+  $field_collection_item = db_query('SELECT item_id, archived FROM {field_collection_item} WHERE item_id = :item_id', array(':item_id' => $item_id))->fetchObject();
+
+  // Do not allow unpublished field collection items to be selected by unprivileged users
+  if (!$field_collection_item || (empty($field_collection_item->status) && !(user_access('administer field collections')))) {
+    form_error($form['field_collection_item'], t('Invalid field collection item selected.'));
+  }
+  else {
+    form_set_value($form['item_id'], $field_collection_item->item_id, $form_state);
+  }
+}
+
+function field_collection_context_field_collection_item_settings_form_submit($form, &$form_state) {
+  $form_state['conf']['item_id'] = $form_state['values']['item_id'];
+}
+
+/**
+ * Provide a list of ways that this context can be converted to a string.
+ */
+function field_collection_context_field_collection_item_convert_list() {
+  $tokens = token_info();
+  foreach ($tokens['tokens']['field_collection_item'] as $id => $info) {
+    if (!isset($list[$id])) {
+      $list[$id] = $info['name'];
+    }
+  }
+
+  return $list;
+}
+
+/**
+ * Convert a context into a string.
+ */
+function field_collection_context_field_collection_item_convert($context, $type) {
+  $tokens = token_info();
+  if (isset($tokens['tokens']['field_collection_item'][$type])) {
+    $values = token_generate('field_collection_item', array($type => $type), array('field_collection_item' => $context->data));
+    if (isset($values[$type])) {
+      return $values[$type];
+    }
+  }
+}
diff --git field_collection/plugins/contexts/field_collection_item_edit_form.inc field_collection/plugins/contexts/field_collection_item_edit_form.inc
new file mode 100644
index 0000000..a09b562
--- /dev/null
+++ field_collection/plugins/contexts/field_collection_item_edit_form.inc
@@ -0,0 +1,179 @@
+<?php
+
+/**
+ * @file
+ *
+ * Plugin to provide a field_collection_item_edit_form context
+ */
+
+/**
+ * Plugins are described by creating a $plugin array which will be used
+ * by the system that includes this file.
+ */
+$plugin = array(
+  'title' => t("Field collection item edit form"),
+  'description' => t('A field collection item edit form.'),
+  'context' => 'field_collection_context_create_field_collection_item_edit_form',
+  'edit form' => 'field_collection_context_field_collection_item_edit_form_settings_form',
+  'defaults' => array('item_id' => ''),
+  'keyword' => 'field_collection_item_edit',
+  'context name' => 'field_collection_item_edit_form',
+  'convert list' => 'field_collection_context_field_collection_item_edit_convert_list',
+  'convert' => 'field_collection_context_field_collection_item_edit_convert',
+  'placeholder form' => array(
+    '#type' => 'textfield',
+    '#description' => t('Enter the field collection item ID of a field collection item for this argument:'),
+  ),
+);
+
+/**
+ * It's important to remember that $conf is optional here, because contexts
+ * are not always created from the UI.
+ */
+function field_collection_context_create_field_collection_item_edit_form($empty, $field_collection_item = NULL, $conf = FALSE) {
+  static $creating = FALSE;
+  $context = new ctools_context(array('form', 'field_collection_item_edit', 'field_collection_item_form',  'field_collection_item_edit_form', 'field_collection_item', 'entity:field_collection_item'));
+  $context->plugin = 'field_collection_item_edit_form';
+
+  if ($empty || ($creating)) {
+    return $context;
+  }
+  $creating = TRUE;
+
+  if ($conf) {
+    // In this case, $field_collection_item is actually our $conf array.
+    $item_id = is_array($field_collection_item) && isset($field_collection_item['item_id']) ? $field_collection_item['item_id'] : (is_object($field_collection_item) ? $field_collection_item->item_id : 0);
+
+    if (module_exists('translation')) {
+      if ($translation = module_invoke('translation', 'field_collection_item_item_id', $item_id, $GLOBALS['language']->language)) {
+        $item_id = $translation;
+        $reload = TRUE;
+      }
+    }
+
+    if (is_array($field_collection_item) || !empty($reload)) {
+      $field_collection_item = field_collection_item_load($item_id);
+    }
+  }
+
+  if (!empty($field_collection_item)) {
+    $form_id = 'field_collection_item_form';
+
+    $form_state = array('want form' => TRUE, 'build_info' => array('args' => array($field_collection_item)));
+
+    $file = drupal_get_path('module', 'field_collection') . '/field_collection.pages.inc';
+    require_once DRUPAL_ROOT . '/' . $file;
+    // This piece of information can let other modules know that more files
+    // need to be included if this form is loaded from cache:
+    $form_state['build_info']['files'] = array($file);
+
+    $form = drupal_build_form($form_id, $form_state);
+
+    // Fill in the 'field_collection_item' portion of the context
+    $context->data     = $field_collection_item;
+    $context->title    = !isset($field_collection_item->is_new) ? $field_collection_item->label() : '';
+    $context->argument = isset($field_collection_item->item_id) ? $field_collection_item->item_id : $field_collection_item->field_name;
+
+    $context->form       = $form;
+    $context->form_state = &$form_state;
+    $context->form_id    = $form_id;
+    $context->form_title = $field_collection_item->label();
+    $context->field_collection_item  = $field_collection_item->field_name;
+    $context->field_name  = $field_collection_item->field_name;
+    $context->restrictions['field_name'] = array($field_collection_item->field_name);
+    $context->restrictions['form'] = array('form');
+
+    $creating = FALSE;
+    return $context;
+  }
+  $creating = FALSE;
+}
+
+function field_collection_context_field_collection_item_edit_form_settings_form($form, &$form_state) {
+  $conf = &$form_state['conf'];
+
+  $form['field_collection_item'] = array(
+    '#title' => t('Enter the item id of a field_collection_item'),
+    '#type' => 'textfield',
+    '#maxlength' => 512,
+    '#autocomplete_path' => 'ctools/autocomplete/field_collection_item',
+    '#weight' => -10,
+  );
+
+  if (!empty($conf['item_id'])) {
+    $info = db_query('SELECT * FROM {field_collection_item} WHERE item_id = :item_id', array(':item_id' => $conf['item_id']))->fetchObject();
+    if ($info) {
+      $link = l(t('%field_name [item id %item_id]', array('%field_name' => $info->field_name, '%item_id' => $info->item_id)), 'field-collection/'. strtr($info->field_name, array('_' => '-')) . '/' . $info->item_id, array('attributes' => array('target' => '_blank', 'title' => t('Open in new window')), 'html' => TRUE));
+      $form['field_collection_item']['#description'] = t('Currently set to !link', array('!link' => $link));
+    }
+  }
+
+  $form['item_id'] = array(
+    '#type' => 'value',
+    '#value' => $conf['item_id'],
+  );
+
+  return $form;
+}
+
+/**
+ * Validate a field_collection_item.
+ */
+function field_collection_context_field_collection_item_edit_form_settings_form_validate($form, &$form_state) {
+  // Validate the autocomplete
+  if (empty($form_state['values']['item_id']) && empty($form_state['values']['field_collection_item'])) {
+    form_error($form['field_collection_item'], t('You must select a field collection item.'));
+    return;
+  }
+
+  if (empty($form_state['values']['field_collection_item'])) {
+    return;
+  }
+
+  $item_id          = $form_state['values']['field_collection_item'];
+  $preg_matches = array();
+  $match        = preg_match('/\[id: (\d+)\]/', $item_id, $preg_matches);
+  if (!$match) {
+    $match = preg_match('/^id: (\d+)/', $item_id, $preg_matches);
+  }
+
+  if ($match) {
+    $item_id = $preg_matches[1];
+  }
+  if (is_numeric($item_id)) {
+    $field_collection_item = db_query('SELECT item_id, archived FROM {field_collection_item} WHERE item_id = :item_id', array(':item_id' => $item_id))->fetchObject();
+  }
+  else {
+    $field_collection_item = db_query('SELECT item_id, archived FROM {field_collection_item} WHERE LOWER(title) = LOWER(:title)', array(':title' => $item_id))->fetchObject();
+  }
+
+  // Do not allow archived field collection items to be selected by unprivileged users
+  if (!$field_collection_item || (empty($field_collection_item->archived) && !(user_access('administer field collections')))) {
+    form_error($form['field_collection_item'], t('Invalid field collection item selected.'));
+  }
+  else {
+    form_set_value($form['item_id'], $field_collection_item->item_id, $form_state);
+  }
+}
+
+function field_collection_context_field_collection_item_edit_form_settings_form_submit($form, &$form_state) {
+  $form_state['conf']['item_id'] = $form_state['values']['item_id'];
+}
+
+/**
+ * Provide a list of ways that this context can be converted to a string.
+ */
+function field_collection_context_field_collection_item_edit_convert_list() {
+  // Pass through to the "field_collection_item" context convert list.
+  $plugin = ctools_get_context('field_collection_item');
+  return field_collection_context_field_collection_item_convert_list();
+}
+
+/**
+ * Convert a context into a string.
+ */
+function field_collection_context_field_collection_item_edit_convert($context, $type) {
+  // Pass through to the "field_collection_item" context convert list.
+  $plugin = ctools_get_context('field_collection_item');
+  return field_collection_context_field_collection_item_convert($context, $type);
+}
diff --git field_collection/plugins/relationships/field_collection_item_edit_form_from_field_collection_item.inc field_collection/plugins/relationships/field_collection_item_edit_form_from_field_collection_item.inc
new file mode 100644
index 0000000..6a185cb
--- /dev/null
+++ field_collection/plugins/relationships/field_collection_item_edit_form_from_field_collection_item.inc
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * @file
+ * Plugin to provide an relationship handler for term from field_collection_item.
+ */
+
+/**
+ * Plugins are described by creating a $plugin array which will be used
+ * by the system that includes this file.
+ */
+$plugin = array(
+  'title' => t('Field collection item edit form from field collection item'),
+  'keyword' => 'field_collection_item_form',
+  'description' => t('Adds field collection item edit form from a field collection item context.'),
+  'required context' => new ctools_context_required(t('Field collection item'), 'field_collection_item'),
+  'context' => 'field_collection_field_collection_item_edit_form_from_field_collection_item_context',
+);
+
+/**
+ * Return a new context based on an existing context.
+ */
+function field_collection_field_collection_item_edit_form_from_field_collection_item_context($context, $conf) {
+  if (empty($context->data)) {
+    return ctools_context_create_empty('field_collection_item_edit_form', NULL);
+  }
+
+  if (isset($context->data->item_id)) {
+    return ctools_context_create('field_collection_item_edit_form', $context->data);
+  }
+}
diff --git field_collection/plugins/tasks/field_collection_item_edit.inc field_collection/plugins/tasks/field_collection_item_edit.inc
new file mode 100644
index 0000000..2a2e661
--- /dev/null
+++ field_collection/plugins/tasks/field_collection_item_edit.inc
@@ -0,0 +1,213 @@
+<?php
+
+/**
+ * Specialized implementation of hook_page_manager_task_tasks(). See api-task.html for
+ * more information.
+ */
+function field_collection_field_collection_item_edit_page_manager_tasks() {
+  return array(
+    // This is a 'page' task and will fall under the page admin UI
+    'task type' => 'page',
+
+    'title' => t('Field collection item add/edit form'),
+    'admin title' => t('Field collection item add/edit form'),
+    'admin description' => t('When enabled, this overrides the default Drupal behavior for adding or edit field collection items at <em>field-collection/[field-name]/%field_collection_item/edit</em> and <em>field-collection/[field-name]/add/[entity-type]/[entity-id]</em>. If you add variants, you may use selection criteria such as field collection item type or language or user access to provide different edit forms for field collection itemss. If no variant is selected, the default Drupal field collection item edit will be used.'),
+    'admin path' => 'field-collection/%/%field_collection_item/edit',
+
+    // Menu hooks so that we can alter the
+    // field-collection/[field-name]/%field_collection_item menu entry to point to us.
+    'hook menu' => 'field_collection_field_collection_item_edit_menu',
+    'hook menu alter' => 'field_collection_field_collection_item_edit_menu_alter',
+
+    // This is task uses 'context' handlers and must implement these to give the
+    // handler data it needs.
+    'handler type' => 'context',
+    'get arguments' => 'field_collection_field_collection_item_edit_get_arguments',
+    'get context placeholders' => 'field_collection_field_collection_item_edit_get_contexts',
+
+    // Allow this to be enabled or disabled:
+    'disabled' => variable_get('field_collection_field_collection_item_edit_disabled', TRUE),
+    'enable callback' => 'field_collection_field_collection_item_edit_enable',
+    'access callback' => 'field_collection_field_collection_item_edit_access_check',
+  );
+}
+
+/**
+ * Callback defined by field_collection_field_collection_item_edit_page_manager_tasks().
+ *
+ * Alter the field collection item edit input so that field collection item edit comes to
+ * us rather than the normal field collection item edit process.
+ */
+function field_collection_field_collection_item_edit_menu_alter(&$items, $task) {
+  if (variable_get('field_collection_field_collection_item_edit_disabled', TRUE)) {
+    return;
+  }
+
+  foreach (field_info_fields() as $field) {
+    if ($field['type'] == 'field_collection') {
+      $path = field_collection_field_get_path($field);
+      $count = count(explode('/', $path));
+
+      $callback = $items[$path . '/%field_collection_item/edit']['page callback'];
+      $callback_args = $items[$path . '/%field_collection_item/edit']['page arguments'];
+      // Override the field collection item edit handler for our purpose.
+      if (($callback == 'drupal_get_form' && $callback_args[0] == 'field_collection_item_form') || variable_get('page_manager_override_anyway', FALSE)) {
+        $items[$path . '/%field_collection_item/edit']['page callback'] = 'field_collection_field_collection_item_edit';
+        $items[$path . '/%field_collection_item/edit']['file path'] = $task['path'];
+        $items[$path . '/%field_collection_item/edit']['file'] = $task['file'];
+      }
+      else {
+        variable_set('field_collection_field_collection_item_edit_disabled', TRUE);
+        if (!empty($GLOBALS['field_collection_enabling_field_collection_item_edit'])) {
+          drupal_set_message(t('Page manager module is unable to enable @path/%field_collection_item/edit because some other module already has overridden with %callback.', array('@path' => $path, '%callback' => $callback)), 'warning');
+        }
+      }
+
+      // Also catch add handling:
+      $add_path = $path . '/add/%/%';
+      if ($items[$add_path]['page callback'] != 'field_collection_item_add') {
+        if (!empty($GLOBALS['field_collection_enabling_field_collection_item_edit'])) {
+          drupal_set_message(t('Page manager module is unable to override @path because some other module already has overridden with %callback. Field collection item edit will be enabled but that edit path will not be overridden.', array('@path' => $add_path, '%callback' => $items[$add_path]['page callback'])), 'warning');
+        }
+        continue;
+      }
+
+      $items[$add_path]['page callback'] = 'field_collection_field_collection_item_add';
+      $items[$add_path]['file path'] = $task['path'];
+      $items[$add_path]['file'] = $task['file'];
+    }
+  }
+}
+
+/**
+ * Entry point for our overridden field collection item edit.
+ *
+ * This function asks its assigned handlers who, if anyone, would like
+ * to run with it. If no one does, it passes through to the standard
+ * field collection item edit, which is drupal_get_form('field_collection_item_form').
+ */
+function field_collection_field_collection_item_edit($form_id, $field_collection_item) {
+  // Load my task plugin
+  $task = page_manager_get_task('field_collection_item_edit');
+
+  // Load the field_collection_item into a context.
+  ctools_include('context');
+  ctools_include('context-task-handler');
+  $contexts = ctools_context_handler_get_task_contexts($task, '', array($field_collection_item));
+
+  $arg = array(isset($field_collection_item->item_id) ? $field_collection_item->item_id : '');
+  $output = ctools_context_handler_render($task, '', $contexts, $arg);
+  if ($output === FALSE) {
+    // Fall back!
+    // We've already built the form with the context, so we can't build it again, or
+    // form_clean_id will mess up our ids. But we don't really need to, either:
+    $context = reset($contexts);
+    $output = $context->form;
+  }
+
+  return $output;
+}
+
+/**
+ * Callback to handle the process of adding a field collection item.
+ *
+ * This creates a basic $field_collection_item and passes that off to field_collection_field_collection_item_edit().
+ * It is modeled after field_collection_item_add() function.
+ *
+ * Unlike field_collection_item_add() we do not need to check
+ * field_collection_item_access() because that was already checked by the menu
+ * system.
+ */
+function field_collection_field_collection_item_add($field_name, $entity_type, $entity_id) {
+  global $user;
+
+  $info = entity_get_info();
+  if (!isset($info[$entity_type])) {
+    return MENU_NOT_FOUND;
+  }
+  $result = entity_load($entity_type, array($entity_id));
+  $entity = reset($result);
+  if (!$entity) {
+    return MENU_NOT_FOUND;
+  }
+  // Ensure the given entity is of a bundle that has an instance of the field.
+  list($id, $rev_id, $bundle) = entity_extract_ids($entity_type, $entity);
+  $instance = field_info_instance($entity_type, $field_name, $bundle);
+  if (!$instance) {
+    return MENU_NOT_FOUND;
+  }
+  // Check field cardinality.
+  $field = field_info_field($field_name);
+  $langcode = LANGUAGE_NONE;
+  if (!($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || !isset($entity->{$field_name}[$langcode]) || count($entity->{$field_name}[$langcode]) < $field['cardinality'])) {
+    drupal_set_message(t('Too many items.'), 'error');
+    return '';
+  }
+
+  $field_collection_item = entity_create('field_collection_item', array('field_name' => $field_name));
+  // Do not link the field collection item with the host entity at this point,
+  // as during the form-workflow we have multiple field collection item entity
+  // instances, which we don't want link all with the host.
+  // That way the link is going to be created when the item is saved.
+  $field_collection_item->setHostEntity($entity_type, $entity, LANGUAGE_NONE, FALSE);
+
+  $title = ($field['cardinality'] == 1) ? $instance['label'] : t('Add new !instance_label', array('!instance_label' => $field_collection_item->translatedInstanceLabel()));
+  drupal_set_title($title);
+
+  return field_collection_field_collection_item_edit('field_collection_item_form', $field_collection_item);
+}
+
+/**
+ * Callback to get arguments provided by this task handler.
+ *
+ * Since this is the field collection item edit and there is no UI on the arguments, we
+ * create dummy arguments that contain the needed data.
+ */
+function field_collection_field_collection_item_edit_get_arguments($task, $subtask_id) {
+  return array(
+    array(
+      'keyword' => 'field_collection_item',
+      'identifier' => t('Field collection item being edited'),
+      'id' => 2,
+      'name' => 'field_collection_item_edit',
+      'settings' => array(),
+    ),
+  );
+}
+
+/**
+ * Callback to get context placeholders provided by this handler.
+ */
+function field_collection_field_collection_item_edit_get_contexts($task, $subtask_id) {
+  return ctools_context_get_placeholders_from_argument(field_collection_field_collection_item_edit_get_arguments($task, $subtask_id));
+}
+
+/**
+ * Callback to enable/disable the page from the UI.
+ */
+function field_collection_field_collection_item_edit_enable($cache, $status) {
+  variable_set('field_collection_field_collection_item_edit_disabled', $status);
+  // Set a global flag so that the menu routine knows it needs
+  // to set a message if enabling cannot be done.
+  if (!$status) {
+    $GLOBALS['field_collection_enabling_field_collection_item_edit'] = TRUE;
+  }
+}
+
+/**
+ * Callback to determine if a page is accessible.
+ *
+ * @param $task
+ *   The task plugin.
+ * @param $subtask_id
+ *   The subtask id
+ * @param $contexts
+ *   The contexts loaded for the task.
+ * @return
+ *   TRUE if the current user can access the page.
+ */
+function field_collection_field_collection_item_edit_access_check($task, $subtask_id, $contexts) {
+  $context = reset($contexts);
+  return field_collection_item_access('create', $context->data);
+  //return MENU_ACCESS_DENIED;
+}
